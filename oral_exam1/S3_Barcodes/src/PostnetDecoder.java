/**
 * Class to decode a binary encoded POSTNET Zip Code
 * @author cjsindt
 * @version 1.0.0 8 Sept 2020
 */
public class PostnetDecoder {

    private String zipCode = ""; //the final zip code
    private String binaryEncoding = ""; //the given encoding

    //a chart to map binary values to decimal values based on the index
    final private static String[] zipEncodingChart = {"11000", "00011", "00101", "00110", "01001", "01010", "01100", "10001", "10010", "10100"};

    /**
     * Default constructor sets binary encoding to ""
     */
    public PostnetDecoder(){
        binaryEncoding = "";
    }

    /**
     * Constructor that takes a binary encoding from the user
     * @param bin   a POSTNET encoded zip code in binary
     */
    public PostnetDecoder(String bin){
        setBinaryEncoding(bin);
    }

    /**
     * Sets the binary encoding to the given encoding. Calls method to encode that value to a zip code if it is valid.
     * @param bin   a POSTNET encoded zip code in binary
     */
    public void setBinaryEncoding(String bin){
        if(isValidBinaryEncoding(bin)) {
            binaryEncoding = bin;
            encodeZip(bin);
        }else{
            System.out.println("Invalid Binary Encoding.");
        }
    }

    /**
     * Returns the zip code generated by the class.
     * @return  zip code generated from binary encoding
     */
    public String getZipCode(){
        return zipCode;
    }

    /**
     * Returns the binary encoding
     * @return  binary encoding
     */
    private String getBinaryEncoding(){
        return binaryEncoding;
    }

    /**
     * Takes a POSTNET binary encoded zip code and evaluates if it is a valid zip code
     * @param bin   a POSTNET binary encoded zip code
     * @return      true if the given code is a valid zip code, false otherwise
     */
    public static boolean isValidBinaryEncoding(String bin){

        //null check
        if(bin != null || bin.length() == 0){

            if(bin.charAt(0) == '1' && bin.charAt(bin.length()-1) == '1') {

                //only valid encoding lengths are 32 (ZIP), 52 (ZIP+4), and 62 (ZIP+4+Delivery Code)
                if (bin.length() == 32 || bin.length() == 52 || bin.length() == 62) {

                    //for validating check sum
                    int checkSum = 0;

                    //can traverse from 1 -> bin.length()-1 because of the included 1's on each end
                    //also can go by 5 because of 5 bit chunks
                    for (int i = 1; i < bin.length() - 6; i += 5) {

                        for (int j = 0; j < 10; j++) {
                            //if the next sequence of 5 bits is a valid encoding, add the index to checkSum and set j to 9 to exit the loop
                            if (zipEncodingChart[j].equals(bin.substring(i, i + 5))) {
                                checkSum += j;
                                j = 9;
                            }
                            //if no matches are found by the time j = 9, it is invalid
                            else if (j == 9) {
                                System.out.println("Invalid sequence of bits in encoding.");
                                return false;
                            }
                        }
                    }

                    //calculate the check sum
                    if(checkSum % 10 != 0) {
                        checkSum = 10 - (checkSum % 10);
                    } else {
                        checkSum = 0;
                    }

                    //get the checksum value from the encoding
                    for (int i = 0; i < 10; i++) {
                        //the checksum is the first 5 of the last 6 digits
                        if (bin.substring(bin.length() - 6, bin.length() - 1).equals(zipEncodingChart[i])) {
                            //make sure the check sum is accurate
                            if(checkSum != i){
                                System.out.println("Invalid Checksum.");
                                return false;
                            }
                            //check sum is accurate, exit for loop
                            i = 9;
                        }
                    }
                }
                //input is invalid length, return false
                else {
                    System.out.println("Invalid length.");
                    return false;
                }
            }
            //bin does not begin or end with 1
            else{
                System.out.println("Encoding should begin and end with a 1.");
                return false;
            }
        }
        //bin is null, return false
        else{
            System.out.println("Input is null or empty.");
            return false;
        }

        return true;
    }

    /**
     * Encodes a given POSTNET binary encoded zip code into a human readable zip code
     * @param bin   a POSTNET binary encoded zip code
     */
    private void encodeZip(String bin){

        //can traverse from 1 -> bin.length()-1 because of the included 1's on each end
        //also can go by 5 because of 5 bit chunks and last 5 bits is check sum
        for (int i = 1; i < bin.length() - 6; i += 5) {

            //after 5 digits, add a hyphen. Add another after another 4 digits (ZIP+4 and ZIP+4+Delivery Code)
            if (i == 26 || i == 46) {
                zipCode += '-';
            }

            for (int j = 0; j < 10; j++) {

                if (bin.substring(i, i + 5).equals(zipEncodingChart[j])) {
                    zipCode += j;
                }
            }


        }
    }
}
